{
  "name": "Haskell",
  "headline": "FSML implementation using Template Haskell",
  "sections": [
    {
      "features": [
        "AST^-"
      ],
      "headline": "AST implementation",
      "perspective": "meta",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/src/Language/FSML/Ast.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [],
        "concepts": [
          "Algebraic data type"
        ],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 9,
            "to": 11
          },
          "unfolded": {
            "from": 7,
            "to": 15
          }
        }
      }
    },
    {
      "features": [
        "Scannerfull parsing"
      ],
      "headline": "Lexer definition",
      "perspective": "meta",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/src/Language/FSML/Lexer.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [
          "Parsec"
        ],
        "concepts": [
          "Lexer"
        ],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 13,
            "to": 25
          },
          "unfolded": {
            "from": 13,
            "to": 43
          }
        }
      }
    },
    {
      "features": [
        "Scannerfull parsing",
        "Text-to-AST"
      ],
      "headline": "Parser combinator",
      "perspective": "meta",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/src/Language/FSML/Parser.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [
          "Parsec"
        ],
        "concepts": [
          "Parser combinator"
        ],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 31,
            "to": 36
          },
          "unfolded": {
            "from": 28,
            "to": 50
          }
        }
      }
    },
    {
      "features": [
        "Creole^+-"
      ],
      "headline": "Embedded turnstile object in Haskell declaration context",
      "perspective": "object",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/app/Main.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [
          "Template Haskell"
        ],
        "concepts": [
          "Quasi-quotation"
        ],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 7,
            "to": 11
          },
          "unfolded": {
            "from": 7,
            "to": 22
          }
        }
      }
    },
    {
      "features": [
        "Analyse^O"
      ],
      "headline": "Constraint checking",
      "perspective": "meta",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/src/Language/FSML/Checker.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [],
        "concepts": [],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 22,
            "to": 27
          },
          "unfolded": {
            "from": 8,
            "to": 46
          }
        }
      }
    },
    {
      "features": [
        "Analyse^M"
      ],
      "headline": "By generating alternatives for the state data type distinct state ids are guaranteed",
      "perspective": "meta",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/src/Language/FSML/QuasiQuoter.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [],
        "concepts": [],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 42,
            "to": 50
          }
        }
      }
    },
    {
      "features": [
        "Interpret^M"
      ],
      "headline": "Transitioning between states by folding over the generated event functions",
      "perspective": "data",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/app/Main.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [],
        "concepts": [
          "Currying",
          "Fold"
        ],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 24,
            "to": 28
          }
        }
      }
    },
    {
      "features": [
        "Translate^M"
      ],
      "headline": "Transitions are translated to Haskell AST",
      "perspective": "meta",
      "projection": {
        "type": "implementation",
        "link": "https://raw.githubusercontent.com/softlang/metalib/master/haskell/fsml/src/Language/FSML/QuasiQuoter.hs",
        "languages": [
          "Haskell"
        ],
        "technologies": [
          "Template Haskell"
        ],
        "concepts": [
          "Quasi-quotation"
        ],
        "selection": {
          "type": "excerpt",
          "folded": {
            "from": 52,
            "to": 75
          }
        }
      }
    }
  ]
}
