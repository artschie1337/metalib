/**
 * generated by Xtext 2.10.0
 */
package org.softlang.metalib.xtext.fsml.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.softlang.metalib.xtext.fsml.fsml.FSM;
import org.softlang.metalib.xtext.fsml.fsml.FSMState;
import org.softlang.metalib.xtext.fsml.fsml.FSMTransition;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FsmlGenerator extends AbstractGenerator {
  /**
   * Utility, gets the file name without the extension
   */
  public String getFileName(final String name) {
    final int l = name.lastIndexOf(".");
    if ((l >= 0)) {
      return name.substring(0, l);
    } else {
      return name;
    }
  }
  
  /**
   * Gets an appropriate package name for the resource
   */
  public String getPackageName(final Resource resource) {
    final StringBuilder result = new StringBuilder();
    final URI uri = resource.getURI();
    int _segmentCount = uri.segmentCount();
    int _minus = (_segmentCount - 1);
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(3, _minus, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        String _segment = uri.segment((i).intValue());
        String _firstLower = StringExtensions.toFirstLower(_segment);
        result.append(_firstLower);
        result.append(".");
      }
    }
    String _lastSegment = uri.lastSegment();
    String _firstLower = StringExtensions.toFirstLower(_lastSegment);
    String _fileName = this.getFileName(_firstLower);
    result.append(_fileName);
    return result.toString();
  }
  
  /**
   * Gets an appropriate package file path for the resource
   */
  public String getPackagePath(final Resource resource) {
    final StringBuilder result = new StringBuilder();
    final URI uri = resource.getURI();
    int _segmentCount = uri.segmentCount();
    int _minus = (_segmentCount - 1);
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(3, _minus, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        String _segment = uri.segment((i).intValue());
        String _firstLower = StringExtensions.toFirstLower(_segment);
        result.append(_firstLower);
        result.append("/");
      }
    }
    String _lastSegment = uri.lastSegment();
    String _firstLower = StringExtensions.toFirstLower(_lastSegment);
    String _fileName = this.getFileName(_firstLower);
    result.append(_fileName);
    return result.toString();
  }
  
  public FSMState getContainingState(final FSMTransition t) {
    EObject _eContainer = t.eContainer();
    return ((FSMState) _eContainer);
  }
  
  public FSMState getDestinationState(final FSMTransition t) {
    FSMState _xifexpression = null;
    FSMState _target = t.getTarget();
    boolean _equals = Objects.equal(_target, null);
    if (_equals) {
      _xifexpression = this.getContainingState(t);
    } else {
      _xifexpression = t.getTarget();
    }
    return _xifexpression;
  }
  
  public String getGraphLabel(final FSMTransition t) {
    String _xifexpression = null;
    String _action = t.getAction();
    boolean _equals = Objects.equal(_action, null);
    if (_equals) {
      _xifexpression = t.getInput();
    } else {
      String _input = t.getInput();
      String _plus = ("\'" + _input);
      String _plus_1 = (_plus + "/");
      String _action_1 = t.getAction();
      String _plus_2 = (_plus_1 + _action_1);
      _xifexpression = (_plus_2 + "\'");
    }
    return _xifexpression;
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final String packageName = this.getPackageName(resource);
    final String packagePath = this.getPackagePath(resource);
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<FSM> _filter = Iterators.<FSM>filter(_allContents, FSM.class);
    Iterable<FSM> _iterable = IteratorExtensions.<FSM>toIterable(_filter);
    for (final FSM fsm : _iterable) {
      {
        EList<FSMState> _states = fsm.getStates();
        final Function1<FSMState, String> _function = (FSMState s) -> {
          return s.getName();
        };
        List<String> _map = ListExtensions.<FSMState, String>map(_states, _function);
        final Set<String> states = IterableExtensions.<String>toSet(_map);
        EList<FSMState> _states_1 = fsm.getStates();
        final Function1<FSMState, Boolean> _function_1 = (FSMState s) -> {
          return Boolean.valueOf(s.isInitial());
        };
        FSMState _findFirst = IterableExtensions.<FSMState>findFirst(_states_1, _function_1);
        final String initial = _findFirst.getName();
        EList<FSMState> _states_2 = fsm.getStates();
        final Function1<FSMState, List<String>> _function_2 = (FSMState s) -> {
          EList<FSMTransition> _transitions = s.getTransitions();
          final Function1<FSMTransition, String> _function_3 = (FSMTransition t) -> {
            return t.getInput();
          };
          return ListExtensions.<FSMTransition, String>map(_transitions, _function_3);
        };
        List<List<String>> _map_1 = ListExtensions.<FSMState, List<String>>map(_states_2, _function_2);
        Iterable<String> _flatten = Iterables.<String>concat(_map_1);
        final Set<String> inputs = IterableExtensions.<String>toSet(_flatten);
        EList<FSMState> _states_3 = fsm.getStates();
        final Function1<FSMState, Iterable<String>> _function_3 = (FSMState s) -> {
          EList<FSMTransition> _transitions = s.getTransitions();
          final Function1<FSMTransition, Boolean> _function_4 = (FSMTransition t) -> {
            String _action = t.getAction();
            return Boolean.valueOf((!Objects.equal(_action, null)));
          };
          Iterable<FSMTransition> _filter_1 = IterableExtensions.<FSMTransition>filter(_transitions, _function_4);
          final Function1<FSMTransition, String> _function_5 = (FSMTransition t) -> {
            return t.getAction();
          };
          return IterableExtensions.<FSMTransition, String>map(_filter_1, _function_5);
        };
        List<Iterable<String>> _map_2 = ListExtensions.<FSMState, Iterable<String>>map(_states_3, _function_3);
        Iterable<String> _flatten_1 = Iterables.<String>concat(_map_2);
        final Set<String> actions = IterableExtensions.<String>toSet(_flatten_1);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("package ");
        _builder.append(packageName, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("public enum State");
        _builder.newLine();
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        {
          boolean _hasElements = false;
          for(final String x : states) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(", ", "\t");
            }
            _builder.append(x, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        fsa.generateFile((packagePath + "/State.java"), _builder);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("package ");
        _builder_1.append(packageName, "");
        _builder_1.append(";");
        _builder_1.newLineIfNotEmpty();
        _builder_1.newLine();
        _builder_1.append("public enum Input");
        _builder_1.newLine();
        _builder_1.append("{");
        _builder_1.newLine();
        _builder_1.append("\t");
        {
          boolean _hasElements_1 = false;
          for(final String x_1 : inputs) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder_1.appendImmediate(", ", "\t");
            }
            _builder_1.append(x_1, "\t");
          }
        }
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("}");
        fsa.generateFile((packagePath + "/Input.java"), _builder_1);
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("package ");
        _builder_2.append(packageName, "");
        _builder_2.append(";");
        _builder_2.newLineIfNotEmpty();
        _builder_2.newLine();
        _builder_2.append("public enum Action");
        _builder_2.newLine();
        _builder_2.append("{");
        _builder_2.newLine();
        _builder_2.append("\t");
        {
          boolean _hasElements_2 = false;
          for(final String x_2 : actions) {
            if (!_hasElements_2) {
              _hasElements_2 = true;
            } else {
              _builder_2.appendImmediate(", ", "\t");
            }
            _builder_2.append(x_2, "\t");
          }
        }
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("}");
        fsa.generateFile((packagePath + "/Action.java"), _builder_2);
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append("package ");
        _builder_3.append(packageName, "");
        _builder_3.append(";");
        _builder_3.newLineIfNotEmpty();
        _builder_3.newLine();
        _builder_3.append("import org.softlang.metalib.xtext.fsml.runtime.HandlerBase;");
        _builder_3.newLine();
        _builder_3.newLine();
        _builder_3.append("public abstract class Handler implements HandlerBase<Action>");
        _builder_3.newLine();
        _builder_3.append("{");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.append("@Override");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.append("public void handle(Action action)");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.append("{");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("if(action == null)");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("{");
        _builder_3.newLine();
        _builder_3.append("\t\t\t");
        _builder_3.append("throw new IllegalArgumentException(\"null\");");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("}");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("switch(action)");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("{");
        _builder_3.newLine();
        {
          for(final String x_3 : actions) {
            _builder_3.append("\t\t\t");
            _builder_3.append("case ");
            _builder_3.append(x_3, "\t\t\t");
            _builder_3.append(":");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t\t\t");
            _builder_3.append("\t");
            _builder_3.append("handle");
            String _firstUpper = StringExtensions.toFirstUpper(x_3);
            _builder_3.append(_firstUpper, "\t\t\t\t");
            _builder_3.append("();");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t\t\t");
            _builder_3.append("\t");
            _builder_3.append("return;");
            _builder_3.newLine();
          }
        }
        _builder_3.append("\t\t\t");
        _builder_3.newLine();
        _builder_3.append("\t\t\t");
        _builder_3.append("default:");
        _builder_3.newLine();
        _builder_3.append("\t\t\t");
        _builder_3.append("throw new IllegalArgumentException(action.toString());");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("}");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.append("}");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.newLine();
        {
          for(final String x_4 : actions) {
            _builder_3.append("\t");
            _builder_3.append("protected void handle");
            String _firstUpper_1 = StringExtensions.toFirstUpper(x_4);
            _builder_3.append(_firstUpper_1, "\t");
            _builder_3.append("()");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t");
            _builder_3.append("{");
            _builder_3.newLine();
            _builder_3.append("\t");
            _builder_3.append("\t");
            _builder_3.append("unhandled(Action.");
            _builder_3.append(x_4, "\t\t");
            _builder_3.append(");");
            _builder_3.newLineIfNotEmpty();
            _builder_3.append("\t");
            _builder_3.append("}");
            _builder_3.newLine();
            _builder_3.append("\t");
            _builder_3.newLine();
          }
        }
        _builder_3.append("\t");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.append("protected void unhandled(Action action)");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.append("{");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("final Class<?> c = getClass();");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.newLine();
        _builder_3.append("\t\t");
        _builder_3.append("System.out.println(\"Unhandled action in \" + (c.isAnonymousClass() ? \"anonymous class\" : c.getSimpleName()) + \": \" + action);");
        _builder_3.newLine();
        _builder_3.append("\t");
        _builder_3.append("}");
        _builder_3.newLine();
        _builder_3.append("}");
        fsa.generateFile((packagePath + "/Handler.java"), _builder_3);
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("package ");
        _builder_4.append(packageName, "");
        _builder_4.append(";");
        _builder_4.newLineIfNotEmpty();
        _builder_4.newLine();
        _builder_4.append("import org.softlang.metalib.xtext.fsml.runtime.HandlerBase;");
        _builder_4.newLine();
        _builder_4.append("import org.softlang.metalib.xtext.fsml.runtime.StepperBase;");
        _builder_4.newLine();
        _builder_4.newLine();
        _builder_4.append("public class Stepper extends StepperBase<State, Input, Action>");
        _builder_4.newLine();
        _builder_4.append("{");
        _builder_4.newLine();
        _builder_4.append("\t");
        _builder_4.append("public Stepper(HandlerBase<Action> handler)");
        _builder_4.newLine();
        _builder_4.append("\t");
        _builder_4.append("{");
        _builder_4.newLine();
        _builder_4.append("\t\t");
        _builder_4.append("this.handler = handler;");
        _builder_4.newLine();
        _builder_4.append("\t\t");
        _builder_4.append("this.state = State.");
        _builder_4.append(initial, "\t\t");
        _builder_4.append(";");
        _builder_4.newLineIfNotEmpty();
        _builder_4.append("\t\t");
        _builder_4.newLine();
        {
          EList<FSMState> _states_4 = fsm.getStates();
          for(final FSMState s : _states_4) {
            {
              EList<FSMTransition> _transitions = s.getTransitions();
              for(final FSMTransition t : _transitions) {
                _builder_4.append("\t\t");
                _builder_4.append("add(State.");
                String _name = s.getName();
                _builder_4.append(_name, "\t\t");
                _builder_4.append(", Input.");
                String _input = t.getInput();
                _builder_4.append(_input, "\t\t");
                _builder_4.append(", ");
                {
                  String _action = t.getAction();
                  boolean _notEquals = (!Objects.equal(_action, null));
                  if (_notEquals) {
                    _builder_4.append("Action.");
                    String _action_1 = t.getAction();
                    _builder_4.append(_action_1, "\t\t");
                  } else {
                    _builder_4.append("null");
                  }
                }
                _builder_4.append(", State.");
                FSMState _destinationState = this.getDestinationState(t);
                String _name_1 = _destinationState.getName();
                _builder_4.append(_name_1, "\t\t");
                _builder_4.append(");");
                _builder_4.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder_4.append("\t");
        _builder_4.append("}");
        _builder_4.newLine();
        _builder_4.append("}");
        fsa.generateFile((packagePath + "/Stepper.java"), _builder_4);
        StringConcatenation _builder_5 = new StringConcatenation();
        _builder_5.append("(");
        _builder_5.newLine();
        _builder_5.append("  ");
        _builder_5.append("% States");
        _builder_5.newLine();
        _builder_5.append("  ");
        _builder_5.append("[");
        _builder_5.newLine();
        _builder_5.append("  ");
        {
          EList<FSMState> _states_5 = fsm.getStates();
          boolean _hasElements_3 = false;
          for(final FSMState s_1 : _states_5) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder_5.appendImmediate(",\r\n", "  ");
            }
            _builder_5.append("\t(");
            String _name_2 = s_1.getName();
            _builder_5.append(_name_2, "  ");
            _builder_5.append(",");
            String _name_3 = s_1.getName();
            _builder_5.append(_name_3, "  ");
            _builder_5.append(",ellipse,[");
            {
              boolean _isInitial = s_1.isInitial();
              if (_isInitial) {
                _builder_5.append("filled");
              }
            }
            _builder_5.append("])");
          }
        }
        _builder_5.newLineIfNotEmpty();
        _builder_5.append("  ");
        _builder_5.append("],");
        _builder_5.newLine();
        _builder_5.append("  ");
        _builder_5.append("% Edges");
        _builder_5.newLine();
        _builder_5.append("  ");
        _builder_5.append("[");
        _builder_5.newLine();
        _builder_5.append("  ");
        {
          EList<FSMState> _states_6 = fsm.getStates();
          final Function1<FSMState, EList<FSMTransition>> _function_4 = (FSMState it) -> {
            return it.getTransitions();
          };
          List<EList<FSMTransition>> _map_3 = ListExtensions.<FSMState, EList<FSMTransition>>map(_states_6, _function_4);
          Iterable<FSMTransition> _flatten_2 = Iterables.<FSMTransition>concat(_map_3);
          boolean _hasElements_4 = false;
          for(final FSMTransition t_1 : _flatten_2) {
            if (!_hasElements_4) {
              _hasElements_4 = true;
            } else {
              _builder_5.appendImmediate(",\r\n", "  ");
            }
            _builder_5.append("  (");
            FSMState _containingState = this.getContainingState(t_1);
            String _name_4 = _containingState.getName();
            _builder_5.append(_name_4, "  ");
            _builder_5.append(",");
            FSMState _destinationState_1 = this.getDestinationState(t_1);
            String _name_5 = _destinationState_1.getName();
            _builder_5.append(_name_5, "  ");
            _builder_5.append(",[");
            String _graphLabel = this.getGraphLabel(t_1);
            _builder_5.append(_graphLabel, "  ");
            _builder_5.append("])");
          }
        }
        _builder_5.newLineIfNotEmpty();
        _builder_5.append("  ");
        _builder_5.append("]");
        _builder_5.newLine();
        _builder_5.append(").");
        _builder_5.newLine();
        fsa.generateFile((packagePath + ".dgl"), _builder_5);
      }
    }
  }
}
