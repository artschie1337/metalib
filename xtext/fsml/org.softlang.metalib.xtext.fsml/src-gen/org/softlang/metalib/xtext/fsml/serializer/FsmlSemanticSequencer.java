/*
 * generated by Xtext 2.10.0
 */
package org.softlang.metalib.xtext.fsml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.softlang.metalib.xtext.fsml.fsml.FSM;
import org.softlang.metalib.xtext.fsml.fsml.FSMState;
import org.softlang.metalib.xtext.fsml.fsml.FSMTransition;
import org.softlang.metalib.xtext.fsml.fsml.FsmlPackage;
import org.softlang.metalib.xtext.fsml.services.FsmlGrammarAccess;

@SuppressWarnings("all")
public class FsmlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FsmlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FsmlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FsmlPackage.FSM:
				sequence_FSM(context, (FSM) semanticObject); 
				return; 
			case FsmlPackage.FSM_STATE:
				sequence_FSMState(context, (FSMState) semanticObject); 
				return; 
			case FsmlPackage.FSM_TRANSITION:
				sequence_FSMTransition(context, (FSMTransition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FSMState returns FSMState
	 *
	 * Constraint:
	 *     (initial?='initial'? name=ID transitions+=FSMTransition*)
	 */
	protected void sequence_FSMState(ISerializationContext context, FSMState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FSMTransition returns FSMTransition
	 *
	 * Constraint:
	 *     (input=ID action=ID? target=[FSMState|ID]?)
	 */
	protected void sequence_FSMTransition(ISerializationContext context, FSMTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FSM returns FSM
	 *
	 * Constraint:
	 *     states+=FSMState+
	 */
	protected void sequence_FSM(ISerializationContext context, FSM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
